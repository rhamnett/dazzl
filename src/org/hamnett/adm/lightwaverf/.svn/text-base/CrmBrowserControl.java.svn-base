package org.hamnett.adm.crm;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hamnett.adm.crm.impl.CrmConfigurationImpl;

import java.io.IOException;

public class CrmBrowserControl {
    private static final String WIN_ID = "Windows";
    private static final String WIN_PATH = "rundll32";
    private static final String WIN_FLAG = "url.dll,FileProtocolHandler";
    private static String UNIX_PATH = "firefox";
    private static final String UNIX_FLAG = "-remote openURL";
    
    /**
     * Display a file in the system browser.  If you want to display a
     * file, you must include the absolute path name.
     *
     * @param url the file's url (the url must start with either "http://" or
     *            "file://").
     */
    public static void displayURL(String url,String browserPath) {
        boolean windows = isWindowsPlatform();
        String cmd = null;
        
        if (browserPath == null || browserPath.equals("")) {
            UNIX_PATH = "firefox";
        } else {
            UNIX_PATH = browserPath;
        }

        try {
            if (windows) {
                // cmd = 'rundll32 url.dll,FileProtocolHandler http://...'
                cmd = WIN_PATH + " " + WIN_FLAG + " " + url;
                Process p = Runtime.getRuntime().exec(cmd);
            } else {
                // Under Unix, Netscape has to be running for the "-remote"
                // command to work.  So, we try sending the command and
                // check for an exit value.  If the exit command is 0,
                // it worked, otherwise we need to start the browser.
                // cmd = 'netscape -remote openURL(http://www.javaworld.com)'
                if (UNIX_PATH.contains("firefox")) {
                    cmd = UNIX_PATH + " " + UNIX_FLAG + "(" + url + ",new-tab)";
                } else {
                    cmd = UNIX_PATH + " " + UNIX_FLAG + "(" + url + ")";
                }
                Process p = Runtime.getRuntime().exec(cmd);
                try {
                    // wait for exit code -- if it's 0, command worked,
                    // otherwise we need to start the browser up.
                    int exitCode = p.waitFor();
                    if (exitCode != 0) {
                        // Command failed, start up the browser
                        cmd = UNIX_PATH + " " + url;
                        Runtime.getRuntime().exec(cmd);
                    }
                }
                catch (InterruptedException x) {
                    System.err.println("Error bringing up browser, cmd='" +
                            cmd + "'");
                    System.err.println("Caught: " + x);
                }
            }
        }
        catch (IOException x) {
            // couldn't exec browser
            System.err.println("Could not invoke browser, command=" + cmd);
            System.err.println("Caught: " + x);
        }
    }

    /**
     * Try to determine whether this application is running under Windows
     * or some other platform by examing the "os.name" property.
     *
     * @return true if this application is running under a Windows OS
     */
    public static boolean isWindowsPlatform() {
        //String os = System.getProperty("os.name");
        //return os != null && os.startsWith(WIN_ID);
        String os = System.getProperty("os.name");
        return (os != null && os.startsWith(WIN_ID)) ? true : false; 
    }
}

